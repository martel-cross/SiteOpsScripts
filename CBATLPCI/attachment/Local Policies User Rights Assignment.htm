  <head>
  <meta http-equiv="X-UA-Compatible" content="IE=EmulateIE9" />
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-16" />
  <title>Default Domain Policy</title>
  <!-- Styles -->
  <style type="text/css">
                  body    { background-color:#FFFFFF; border:1px solid #666666; color:#000000; font-size:68%; font-family:MS Shell Dlg; margin:0,0,10px,0; word-break:normal; word-wrap:break-word; }
  
                  table   { font-size:100%; table-layout:fixed; width:100%; }
  
                  td,th   { overflow:visible; text-align:left; vertical-align:top; white-space:normal; }
  
                  .title  { background:#FFFFFF; border:none; color:#333333; display:block; height:24px; margin:0px,0px,-1px,0px; padding-top:4px; position:relative; table-layout:fixed; width:100%; z-index:5; }
  
                  .he0_expanded    { background-color:#FEF7D6; border:1px solid #BBBBBB; color:#3333CC; cursor:hand; display:block; font-family:MS Shell Dlg; font-size:100%; font-weight:bold; height:2.25em; margin-bottom:-1px; margin-left:0px; margin-right:0px; padding-left:8px; padding-right:5em; padding-top:4px; position:relative; width:100%; }
  
                  .he1_expanded    { background-color:#A0BACB; border:1px solid #BBBBBB; color:#000000; cursor:hand; display:block; font-family:MS Shell Dlg; font-size:100%; font-weight:bold; height:2.25em; margin-bottom:-1px; margin-left:20px; margin-right:0px; padding-left:8px; padding-right:5em; padding-top:4px; position:relative; width:100%; }
  
                  .he0h_expanded   { background-color: #FEF0D0; border: 1px solid #BBBBBB; color: #000000; cursor: hand; display: block; font-family: MS Shell Dlg; font-size: 100%; font-weight: bold; height: 2.25em; margin-bottom: -1px; margin-left: 5px; margin-right: 0px; padding-left: 8px; padding-right: 5em; padding-top: 4px; position: relative; width: 100%; }
                  .he1h_expanded   { background-color: #7197B3; border: 1px solid #BBBBBB; color: #000000; cursor: hand; display: block; font-family: MS Shell Dlg; font-size: 100%; font-weight: bold; height: 2.25em; margin-bottom: -1px; margin-left: 10px; margin-right: 0px; padding-left: 8px; padding-right: 5em; padding-top: 4px; position: relative; width: 100%; }
  
                  .he1    { background-color:#A0BACB; border:1px solid #BBBBBB; color:#000000; cursor:hand; display:block; font-family:MS Shell Dlg; font-size:100%; font-weight:bold; height:2.25em; margin-bottom:-1px; margin-left:20px; margin-right:0px; padding-left:8px; padding-right:5em; padding-top:4px; position:relative; width:100%; }
  
                  .he2    { background-color:#C0D2DE; border:1px solid #BBBBBB; color:#000000; cursor:hand; display:block; font-family:MS Shell Dlg; font-size:100%; font-weight:bold; height:2.25em; margin-bottom:-1px; margin-left:30px; margin-right:0px; padding-left:8px; padding-right:5em; padding-top:4px; position:relative; width:100%; }
  
                  .he3    { background-color:#D9E3EA; border:1px solid #BBBBBB; color:#000000; cursor:hand; display:block; font-family:MS Shell Dlg; font-size:100%; font-weight:bold; height:2.25em; margin-bottom:-1px; margin-left:40px; margin-right:0px; padding-left:11px; padding-right:5em; padding-top:4px; position:relative; width:100%; }
  
                  .he4    { background-color:#E8E8E8; border:1px solid #BBBBBB; color:#000000; cursor:hand; display:block; font-family:MS Shell Dlg; font-size:100%; font-weight:bold; height:2.25em; margin-bottom:-1px; margin-left:50px; margin-right:0px; padding-left:11px; padding-right:5em; padding-top:4px; position:relative; width:100%; }
  
                  .he4h   { background-color:#E8E8E8; border:1px solid #BBBBBB; color:#000000; cursor:hand; display:block; font-family:MS Shell Dlg; font-size:100%; font-weight:bold; height:2.25em; margin-bottom:-1px; margin-left:55px; margin-right:0px; padding-left:11px; padding-right:5em; padding-top:4px; position:relative; width:100%; }
  
                  .he4i   { background-color:#F9F9F9; border:1px solid #BBBBBB; color:#000000; display:block; font-family:MS Shell Dlg; font-size:100%; margin-bottom:-1px; margin-left:55px; margin-right:0px; padding-bottom:5px; padding-left:21px; padding-top:4px; position:relative; width:100%; }
  
                  .he2i   { background-color:#F9F9F9; border:1px solid #BBBBBB; color:#000000; display:block; font-family:MS Shell Dlg; font-size:100%; margin-bottom:-1px; margin-left:35px; margin-right:0px; padding-bottom:5px; padding-left:21px; padding-top:4px; position:relative; width:100%; }
                  .he5    { background-color:#E8E8E8; border:1px solid #BBBBBB; color:#000000; cursor:hand; display:block; font-family:MS Shell Dlg; font-size:100%; font-weight:bold; height:2.25em; margin-bottom:-1px; margin-left:60px; margin-right:0px; padding-left:11px; padding-right:5em; padding-top:4px; position:relative; width:100%; }
  
                  .he5h   { background-color:#E8E8E8; border:1px solid #BBBBBB; color:#000000; cursor:hand; display:block; font-family:MS Shell Dlg; font-size:100%; padding-left:11px; padding-right:5em; padding-top:4px; margin-bottom:-1px; margin-left:65px; margin-right:0px; position:relative; width:100%; }
  
                  .he5i   { background-color:#F9F9F9; border:1px solid #BBBBBB; color:#000000; display:block; font-family:MS Shell Dlg; font-size:100%; margin-bottom:-1px; margin-left:65px; margin-right:0px; padding-left:21px; padding-bottom:5px; padding-top: 4px; position:relative; width:100%; }
  
                  DIV .expando { color:#000000; text-decoration:none; display:block; font-family:MS Shell Dlg; font-size:100%; font-weight:normal; position:absolute; right:10px; text-decoration:underline; z-index: 0; }
  
                  .he0 .expando { font-size:100%; }
  
                  .info, .info3, .info4, .disalign  { line-height:1.6em; padding:0px,0px,0px,0px; margin:0px,0px,0px,0px; }
  
                  .disalign TD                      { padding-bottom:5px; padding-right:10px; }
  
                  .info TD                          { padding-right:10px; width:50%; }
  
                  .info3 TD                         { padding-right:10px; width:33%; }
  
                  .info4 TD, .info4 TH              { padding-right:10px; width:25%; }
  
                  .info TH, .info3 TH, .info4 TH, .disalign TH { border-bottom:1px solid #CCCCCC; padding-right:10px; }
  
                  .subtable, .subtable3             { border:1px solid #CCCCCC; margin-left:0px; background:#FFFFFF; margin-bottom:10px; }
  
                  .subtable TD, .subtable3 TD       { padding-left:10px; padding-right:5px; padding-top:3px; padding-bottom:3px; line-height:1.1em; width:10%; }
  
                  .subtable TH, .subtable3 TH       { border-bottom:1px solid #CCCCCC; font-weight:normal; padding-left:10px; line-height:1.6em;  }
  
                  .subtable .footnote               { border-top:1px solid #CCCCCC; }
  
                  .subtable3 .footnote, .subtable .footnote { border-top:1px solid #CCCCCC; }
  
                  .subtable_frame     { background:#D9E3EA; border:1px solid #CCCCCC; margin-bottom:10px; margin-left:15px; }
  
                  .subtable_frame TD  { line-height:1.1em; padding-bottom:3px; padding-left:10px; padding-right:15px; padding-top:3px; }
  
                  .subtable_frame TH  { border-bottom:1px solid #CCCCCC; font-weight:normal; padding-left:10px; line-height:1.6em; }
  
                  .subtableInnerHead { border-bottom:1px solid #CCCCCC; border-top:1px solid #CCCCCC; }
  
                  .explainlink            { color:#0000FF; text-decoration:none; cursor:hand; }
  
                  .explainlink:hover      { color:#0000FF; text-decoration:underline; }
  
                  .spacer { background:transparent; border:1px solid #BBBBBB; color:#FFFFFF; display:block; font-family:MS Shell Dlg; font-size:100%; height:10px; margin-bottom:-1px; margin-left:43px; margin-right:0px; padding-top: 4px; position:relative; }
  
                  .filler { background:transparent; border:none; color:#FFFFFF; display:block; font:100% MS Shell Dlg; line-height:8px; margin-bottom:-1px; margin-left:53px; margin-right:0px; padding-top:4px; position:relative; }
  
                  .container { display:block; position:relative; }
  
                  .rsopheader { background-color:#A0BACB; border-bottom:1px solid black; color:#333333; font-family:MS Shell Dlg; font-size:130%; font-weight:bold; padding-bottom:5px; text-align:center; }
  
                  .rsopname { color:#333333; font-family:MS Shell Dlg; font-size:130%; font-weight:bold; padding-left:11px; }
  
                  .gponame{ color:#333333; font-family:MS Shell Dlg; font-size:130%; font-weight:bold; padding-left:11px; }
  
                  .gpotype{ color:#333333; font-family:MS Shell Dlg; font-size:100%; font-weight:bold; padding-left:11px; }
  
                  #uri    { color:#333333; font-family:MS Shell Dlg; font-size:100%; padding-left:11px; }
  
                  #dtstamp{ color:#333333; font-family:MS Shell Dlg; font-size:100%; padding-left:11px; text-align:left; width:30%; }
  
                  #objshowhide { color:#000000; cursor:hand; font-family:MS Shell Dlg; font-size:100%; font-weight:bold; margin-right:0px; padding-right:10px; text-align:right; text-decoration:underline; z-index:2; word-wrap:normal; }
  
                  #gposummary { display:block; }
  
                  #gpoinformation { display:block; }
  
                  @media print {
  
                      #objshowhide{ display:none; }
  
                      body    { color:#000000; border:1px solid #000000; }
  
                      .title  { color:#000000; border:1px solid #000000; }
  
                      .he0_expanded    { color:#000000; border:1px solid #000000; }
  
                      .he1h_expanded   { color:#000000; border:1px solid #000000; }
  
                      .he1_expanded    { color:#000000; border:1px solid #000000; }
  
                      .he1    { color:#000000; border:1px solid #000000; }
  
                      .he2    { color:#000000; background:#EEEEEE; border:1px solid #000000; }
  
                      .he3    { color:#000000; border:1px solid #000000; }
  
                      .he4    { color:#000000; border:1px solid #000000; }
  
                      .he4h   { color:#000000; border:1px solid #000000; }
  
                      .he4i   { color:#000000; border:1px solid #000000; }
  
                      .he5    { color:#000000; border:1px solid #000000; }
  
                      .he5h   { color:#000000; border:1px solid #000000; }
  
                      .he5i   { color:#000000; border:1px solid #000000; }
  
                      }
  
                      v\:* {behavior:url(#default#VML);}
  
  </style>
  <!-- Script 1 -->
  
  <script language="vbscript">
  <!--
  '================================================================================
  ' String "strShowHide(0/1)"
  ' 0 = Hide all mode.
  ' 1 = Show all mode.
  strShowHide = 1
  
  'Localized strings
  strShow = "show"
  strHide = "hide"
  strShowAll = "show all"
  strHideAll = "hide all"
  strShown = "shown"
  strHidden = "hidden"
  strExpandoNumPixelsFromEdge = "10px"
  
  
  Function IsSectionHeader(obj)
      IsSectionHeader = (obj.className = "he0_expanded") Or (obj.className = "he0h_expanded") Or (obj.className = "he1h_expanded") Or (obj.className = "he1_expanded") Or (obj.className = "he1") Or (obj.className = "he2") Or (obj.className = "he3") Or (obj.className = "he4") Or (obj.className = "he4h") Or (obj.className = "he5") Or (obj.className = "he5h")
  End Function
  
  
  Function IsSectionExpandedByDefault(objHeader)
      IsSectionExpandedByDefault = (Right(objHeader.className, Len("_expanded")) = "_expanded")
  End Function
  
  
  ' strState must be show | hide | toggle
  Sub SetSectionState(objHeader, strState)
      ' Get the container object for the section.  It's the first one after the header obj.
  
      i = objHeader.sourceIndex
      Set all = objHeader.parentElement.document.all
      While (all(i).className <"container")
          i = i + 1
      Wend
  
      Set objContainer = all(i)
  
      If strState = "toggle" Then
          If objContainer.style.display = "none" Then
              SetSectionState objHeader, "show"
          Else
              SetSectionState objHeader, "hide"
          End If
  
      Else
          Set objExpando = objHeader.children.item(1)
  
          If strState = "show" Then
              objContainer.style.display = "block"
              objExpando.innerText = strHide
  
          ElseIf strState = "hide" Then
              objContainer.style.display = "none"
              objExpando.innerText = strShow
          End If
      End If
  End Sub
  
  
  Sub ShowSection(objHeader)
      SetSectionState objHeader, "show"
  End Sub
  
  
  Sub HideSection(objHeader)
      SetSectionState objHeader, "hide"
  End Sub
  
  
  Sub ToggleSection(objHeader)
      SetSectionState objHeader, "toggle"
  End Sub
  
  
  '================================================================================
  ' When user clicks anywhere in the document body, determine if user is clicking
  ' on a header element.
  '================================================================================
  Function document_onclick()
      Set strsrc    = window.event.srcElement
  
      While (strsrc.className = "sectionTitle" Or strsrc.className = "expando" Or strsrc.className = "vmlimage")
          Set strsrc = strsrc.parentElement
      Wend
  
      ' Only handle clicks on headers.
      If Not IsSectionHeader(strsrc) Then Exit Function
  
      ToggleSection strsrc
  
      window.event.returnValue = False
  End Function
  
  '================================================================================
  ' link at the top of the page to collapse/expand all collapsable elements
  '================================================================================
  Function objshowhide_onClick()
      Set objBody = document.body.all
      Select Case strShowHide
          Case 0
              strShowHide = 1
              objshowhide.innerText = strShowAll
              For Each obji In objBody
                  If IsSectionHeader(obji) Then
                      HideSection obji
                  End If
              Next
          Case 1
              strShowHide = 0
              objshowhide.innerText = strHideAll
              For Each obji In objBody
                  If IsSectionHeader(obji) Then
                      ShowSection obji
                  End If
              Next
      End Select
  End Function
  
  '================================================================================
  ' onload collapse all except the first two levels of headers (he0, he1)
  '================================================================================
  Function window_onload()
      ' Only initialize once.  The UI may reinsert a report into the webbrowser control,
      ' firing onLoad multiple times.
      If UCase(document.documentElement.getAttribute("gpmc_reportInitialized")) <"TRUE" Then
  
          ' Set text direction
          Call fDetDir(UCase(document.dir))
  
          ' Initialize sections to default expanded/collapsed state.
          Set objBody = document.body.all
  
          For Each obji in objBody
              If IsSectionHeader(obji) Then
                  If IsSectionExpandedByDefault(obji) Then
                      ShowSection obji
                  Else
                      HideSection obji
                  End If
              End If
          Next
  
          objshowhide.innerText = strShowAll
  
          document.documentElement.setAttribute "gpmc_reportInitialized", "true"
      End If
  End Function
  
                  
  
  
  '================================================================================
  ' When direction (LTR/RTL) changes, change adjust for readability
  '================================================================================
  Function document_onPropertyChange()
      If window.event.propertyName = "dir" Then
          Call fDetDir(UCase(document.dir))
      End If
  End Function
  Function fDetDir(strDir)
      strDir = UCase(strDir)
      Select Case strDir
          Case "LTR"
              Set colRules = document.styleSheets(0).rules
              For i = 0 To colRules.length -1
                  Set nug = colRules.item(i)
                  strClass = nug.selectorText
                  If nug.style.textAlign = "right" Then
                      nug.style.textAlign = "left"
                  End If
                  Select Case strClass
                      Case "DIV .expando"
                          nug.style.Left = ""
                          nug.style.right = strExpandoNumPixelsFromEdge
                      Case "#objshowhide"
                          nug.style.textAlign = "right"
                  End Select
              Next
          Case "RTL"
              Set colRules = document.styleSheets(0).rules
              For i = 0 To colRules.length -1
                  Set nug = colRules.item(i)
                  strClass = nug.selectorText
                  If nug.style.textAlign = "left" Then
                      nug.style.textAlign = "right"
                  End If
                  Select Case strClass
                      Case "DIV .expando"
                          nug.style.Left = strExpandoNumPixelsFromEdge
                          nug.style.right = ""
                      Case "#objshowhide"
                          nug.style.textAlign = "left"
                  End Select
              Next
      End Select
  End Function
  
  '================================================================================
  'When printing reports, if a given section is expanded, let's says "shown" (instead of "hide" in the UI).
  '================================================================================
  Function window_onbeforeprint()
      For Each obji In document.all
          If obji.className = "expando" Then
              If obji.innerText = strHide Then obji.innerText = strShown
              If obji.innerText = strShow Then obji.innerText = strHidden
          End If
      Next
  End Function
  
  '================================================================================
  'If a section is collapsed, change to "hidden" in the printout (instead of "show").
  '================================================================================
  Function window_onafterprint()
      For Each obji In document.all
          If obji.className = "expando" Then
              If obji.innerText = strShown Then obji.innerText = strHide
              If obji.innerText = strHidden Then obji.innerText = strShow
          End If
      Next
  End Function
  
  '================================================================================
  ' Adding keypress support for accessibility
  '================================================================================
  Function document_onKeyPress()
      If window.event.keyCode = "32" Or window.event.keyCode = "13" Or window.event.keyCode = "10" Then 'space bar (32) or carriage return (13) or line feed (10)
          If window.event.srcElement.className = "expando" Then Call document_onclick() : window.event.returnValue = false
          If window.event.srcElement.className = "sectionTitle" Then Call document_onclick() : window.event.returnValue = false
          If window.event.srcElement.id = "objshowhide" Then Call objshowhide_onClick() : window.event.returnValue = false
      End If
  End Function
                  
  -->
  </script>
                  
  <!-- Script 2 -->
  <script language="javascript">
  <!--
  var windowsArray = new Array();
  
  function ToggleState(e) 
  {
   if(e.innerText == strShow)
   {
  	e.innerText = strHide;
          var objParentDisplayItem = e.parentNode;
  	var objDisplayItem  = objParentDisplayItem.childNodes;
  	for(i=0;i< objDisplayItem.length; i++)
  	{
  		if (objDisplayItem[i].id == "showItem")
  		{
  			objDisplayItem[i].style.display = "Block";	
  		}
  	}
   }
   else
   {
  	e.innerText = strShow;
  	var objParentDisplayItem = e.parentNode;
  	var objDisplayItem  = objParentDisplayItem.childNodes;
  	for(i=0;i< objDisplayItem.length; i++)
  	{
  		if (objDisplayItem[i].id == "showItem")
  		{
  			objDisplayItem[i].style.display = "None";	
  		}
  	}
   }
  }
  
  function traverseToURL(url)
  {
      if(url != null)
      {
  	   var urlInitialSubstr = url.substring(0,4).toLowerCase();
  	   if(urlInitialSubstr  == "http")
  	   {
  	      window.open(url,"_blank");
  	   }
      }
  }
  
  function getExplainWindowTitle()
  {
          return document.getElementById("explainText_windowTitle").innerHTML;
  }
  
  function getExplainWindowStyles()
  {
          return document.getElementById("explainText_windowStyles").innerHTML;
  }
  
  function getExplainWindowSettingPathLabel()
  {
          return document.getElementById("explainText_settingPathLabel").innerHTML;
  }
  
  function getExplainWindowExplainTextLabel()
  {
          return document.getElementById("explainText_explainTextLabel").innerHTML;
  }
  
  function getExplainWindowPrintButton()
  {
          return document.getElementById("explainText_printButton").innerHTML;
  }
  
  function getExplainWindowCloseButton()
  {
          return document.getElementById("explainText_closeButton").innerHTML;
  }
  
  function getNoExplainTextAvailable()
  {
          return document.getElementById("explainText_noExplainTextAvailable").innerHTML;
  }
  
  function getExplainWindowSupportedLabel()
  {
          return document.getElementById("explainText_supportedLabel").innerHTML;
  }
  
  function getNoSupportedTextAvailable()
  {
          return document.getElementById("explainText_noSupportedTextAvailable").innerHTML;
  }
  
  function showExplainText(srcElement)
  {
      var strSettingName = srcElement.getAttribute("gpmc_settingName");
      var strSettingPath = srcElement.getAttribute("gpmc_settingPath");
      var strSettingDescription = srcElement.getAttribute("gpmc_settingDescription");
  
      if (strSettingDescription == "")
      {
          strSettingDescription = getNoExplainTextAvailable();
      }
  
      var strSupported = srcElement.getAttribute("gpmc_supported");
  
      if (strSupported == "")
      {
          strSupported = getNoSupportedTextAvailable();
      }
  
      var strHtml = "<html dir=" + document.dir +  ">\n";
      strHtml += "<head>\n";
      strHtml += "<meta http-equiv=\"X-UA-Compatible\" content=\"IE=EmulateIE9\" />\n";
      strHtml += "<title>" + getExplainWindowTitle() + "</title>\n";
      strHtml += "<style type='text/css'>\n" + getExplainWindowStyles() + "</style>\n";
      strHtml += "</head>\n";
      strHtml += "<body>\n";
      strHtml += "<div class='head'>" + strSettingName +"</div>\n";
      strHtml += "<div class='path'><b>" + getExplainWindowSettingPathLabel() + "</b><br/>" + strSettingPath +"</div>\n";
      strHtml += "<div class='path'><b>" + getExplainWindowSupportedLabel() + "</b><br/>" + strSupported +"</div>\n";
      strHtml += "<div class='info'>\n";
      strHtml += "<div class='hdr'>" + getExplainWindowExplainTextLabel() + "</div>\n";
      strHtml += "<div class='bdy'>" + strSettingDescription + "</div>\n";
      strHtml += "<div class='btn'>";
      strHtml += getExplainWindowPrintButton();
      strHtml += getExplainWindowCloseButton();
      strHtml += "</div></body></html>";
  
      // IE specific method for showing the popup.
      if(navigator.userAgent.indexOf("MSIE") 0 && window.location.toString().indexOf("file:") == -1)
      {
          var strDiagArgs = "dialogHeight=360px;dialogWidth=630px;status=no;scroll=yes;resizable=yes;minimize=yes;maximize=yes;";
  
          var vModeless = window.showModelessDialog("about:blank", window, strDiagArgs);
          vModeless.document.write(strHtml);
          vModeless.document.close();
          vModeless.location.reload(false);
                          
          window.event.returnValue = false;
      }
      else
      {
          var strDiagArgs = "height=360px, width=630px, status=no, toolbar=no, scrollbars=yes, resizable=yes ";
          
          var expWin = window.open("", "expWin", strDiagArgs);
          expWin.document.write("");
          expWin.document.close();
          expWin.document.write(strHtml);
          expWin.document.close();
          expWin.focus();
      }
      
      return false;
  }
  
  function showEvents(srcElement,bVerbose,bInformational,bWarning,bError)
  {
      var strWindowId = "EventDetails_" + srcElement.getAttribute("eventLogActivityId");
      if((windowsArray[strWindowId]) && (windowsArray[strWindowId].closed == false))
      {
          windowsArray[strWindowId].focus();
      }
      else
      {
          var xmlDocument = RsopDataIslands.XMLDocument;
          var eventIdLabelNode, eventTimeLabelNode, eventDescriptionLabelNode, eventDetailsLabelNode, eventXmlLabelNode, gpEventsTitleNode;
          var eventIdLabelNodeText, eventTimeLabelNodeText, eventDescriptionLabelNodeText, eventXmlLabelNodeText, gpEventsTitleNodeText, eventDetailsLabelNodeText ;
          var singlePassEventsDetailsNode, eventRecordArray;
          var dataNotFoundWarningLabelNode, dataNotFoundWarningLabelNodeText;
  
          if(xmlDocument != null)
          {
              eventIdLabelNode = xmlDocument.selectSingleNode("MainSection/Label[@Name='ComponentStatus_EventId']");
              eventTimeLabelNode = xmlDocument.selectSingleNode("MainSection/Label[@Name='ComponentStatus_EventTime']");
              eventDescriptionLabelNode = xmlDocument.selectSingleNode("MainSection/Label[@Name='ComponentStatus_EventDescription']");
              eventXmlLabelNode = xmlDocument.selectSingleNode("MainSection/Label[@Name='ComponentStatus_EventXml']");
              eventDetailsLabelNode = xmlDocument.selectSingleNode("MainSection/Label[@Name='ComponentStatus_EventDetails']");
              gpEventsTitleNode = xmlDocument.selectSingleNode("MainSection/Label[@Name='ComponentStatus_GPEvents']");
              dataNotFoundWarningLabelNode = xmlDocument.selectSingleNode("MainSection/Label[@Name='Warning_DataNotFound']");
              singlePassEventsDetailsNode = xmlDocument.selectSingleNode("//SinglePassEventsDetails[@ActivityId='" + srcElement.getAttribute("eventLogActivityId") + "']");
          }
  
          eventIdLabelNodeText = null;
          if(eventIdLabelNode != null)
          {
              if((eventIdLabelNode.firstChild != null) && (eventIdLabelNode.firstChild.childNodes.length 0))
              {
                  eventIdLabelNodeText = eventIdLabelNode.firstChild.childNodes[0].nodeValue;
              }   
          }
          if(eventIdLabelNodeText == null)
          {
              eventIdLabelNodeText = "Event ID";
          }
  
          eventTimeLabelNodeText = null;
          if(eventTimeLabelNode != null)
          {
              if((eventTimeLabelNode.firstChild != null) && (eventTimeLabelNode.firstChild.childNodes.length 0))
              {
                  eventTimeLabelNodeText = eventTimeLabelNode.firstChild.childNodes[0].nodeValue;
              }
          }
          if(eventTimeLabelNodeText == null)
          {
              eventTimeLabelNodeText = "Event Time";
          }
  
          eventDescriptionLabelNodeText = null;
          if(eventDescriptionLabelNode != null)
          {
              if((eventDescriptionLabelNode.firstChild != null) && (eventDescriptionLabelNode.firstChild.childNodes.length 0))
              {
                  eventDescriptionLabelNodeText = eventDescriptionLabelNode.firstChild.childNodes[0].nodeValue;
              }
          }
          if(eventDescriptionLabelNodeText == null)
          {
              eventDescriptionLabelNodeText = "Event Description";
          }
  
          if(eventXmlLabelNode != null)
          {
              if((eventXmlLabelNode.firstChild != null) && (eventXmlLabelNode.firstChild.childNodes.length 0))
              {
                  eventXmlLabelNodeText = eventXmlLabelNode.firstChild.childNodes[0].nodeValue;
              }
          }
          if(eventXmlLabelNode == null)
          {
              eventXmlLabelNodeText = "Event XML";
          }
  
          gpEventsTitleNodeText = null;
          if(gpEventsTitleNode != null)
          {
              if((gpEventsTitleNode.firstChild != null) && (gpEventsTitleNode.firstChild.childNodes.length 0))
              {
                  gpEventsTitleNodeText = gpEventsTitleNode.firstChild.childNodes[0].nodeValue;
              }
          }
          if(gpEventsTitleNodeText == null)
          {
              gpEventsTitleNodeText = "Group Policy Events";
          }
  
          eventDetailsLabelNodeText = null;
          if(eventDetailsLabelNode != null)
          {
              if((eventDetailsLabelNode.firstChild != null) && (eventDetailsLabelNode.firstChild.childNodes.length 0))
              {
                  eventDetailsLabelNodeText = eventDetailsLabelNode.firstChild.childNodes[0].nodeValue;
              }
          }
          if(eventDetailsLabelNodeText == null)
          {
              eventDetailsLabelNodeText = "Event Details";
          }
  
          dataNotFoundWarningLabelNodeText = null;
          if(dataNotFoundWarningLabelNode  != null)
          {
              if((dataNotFoundWarningLabelNode.firstChild != null) && (dataNotFoundWarningLabelNode.firstChild.childNodes.length 0))
              {
                  dataNotFoundWarningLabelNodeText = dataNotFoundWarningLabelNode.firstChild.childNodes[0].nodeValue;
              }
          }
          if(dataNotFoundWarningLabelNodeText == null)
          {
              dataNotFoundWarningLabelNodeText = "Data Not Found";
          }
  
          if(singlePassEventsDetailsNode != null)
          {
              eventRecordArray = singlePassEventsDetailsNode.getElementsByTagName("EventRecord");
          }
          var htmlText = "<html dir=" + document.dir +  ">";
          htmlText = htmlText + "<head><";
  	htmlText = htmlText + "<meta http-equiv=\"X-UA-Compatible\" content=\"IE=EmulateIE9\" />";
  	htmlText = htmlText + "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-16\" />";
          htmlText = htmlText + "<title>" + gpEventsTitleNodeText + "</title>";
          htmlText = htmlText + "</head><style type=\"text/css\">";
          htmlText = htmlText + "body    { background-color:#FFFFFF; color:#000000; font-size:68%; font-family:MS Shell Dlg; margin:0,0,10px,0; word-break:normal; word-wrap:break-word; }";
          htmlText = htmlText + "table   { font-size:100%; table-layout:fixed; width:100%; }";
          htmlText = htmlText + "td,th   { overflow:visible; text-align:left; vertical-align:top; white-space:normal; }";
          htmlText = htmlText + ".he1    { text-align: center; background-color:#C0D2DE; border:1px solid #BBBBBB; color:#000000; cursor:hand; display:block; font-family:MS Shell Dlg; font-size:100%; font-weight:bold; height:4em; position:relative; }";
          htmlText = htmlText + ".centerTxt { text-align: center; }";
          htmlText = htmlText + ".txtFormat1 { text-align: left; vertical-align:top; white-space:pre-line; }";
          htmlText = htmlText + "</style>";
  
          htmlText = htmlText + "<scriptfunction toggle(e) {";
          htmlText = htmlText + "if (e.style.display == \"none\"){ e.style.display = \"\"; }";
          htmlText = htmlText + "else { e.style.display = \"none\"; }";
          htmlText = htmlText + "}</script>";
  
          htmlText = htmlText + "<body><table border=1 cellpadding=15 cellspacing=0><tr>";
          htmlText = htmlText + "<th class=\"he1\"><strong>" + eventIdLabelNodeText + "</strong></th>";
          htmlText = htmlText + "<th class=\"he1\"><strong>" + eventTimeLabelNodeText + "</strong></th>";
          htmlText = htmlText + "<th class=\"he1\"><strong>" + eventDescriptionLabelNodeText + "</strong></th>";
          htmlText = htmlText + "<th class=\"he1\"><strong>" + eventDetailsLabelNodeText + "</strong></th>";
  
          htmlText = htmlText + "</tr>";
  
  	var i;
          var eventId;
          var eventTime;
          var eventDescription;
          var eventXml;
          var eventType;
          var displayEvent;
          var eventXmlId;
          var displayBgColor;
  
  	if(eventRecordArray.length 0)
          {
              for (i=0; i < eventRecordArray.length; i++)
              {
                  displayEvent = false;
                  var eventIdElements = eventRecordArray[i].getElementsByTagName("EventId");        
                  if((eventIdElements.length 0) && (eventIdElements[0].firstChild != null))
                  {
                      eventId =  eventIdElements[0].firstChild.nodeValue;
                  }
                  else
                  {
                      eventId =  dataNotFoundWarningLabelNodeText;
                  }
                  var eventTimeElements = eventRecordArray[i].getElementsByTagName("EventTime");
                  if((eventTimeElements.length 0) && (eventTimeElements[0].firstChild != null))
                  {
                      eventTime = eventTimeElements[0].firstChild.nodeValue;
                  }
                  else
                  {
                      eventTime = dataNotFoundWarningLabelNodeText;
                  }
                  var eventDescriptionElements = eventRecordArray[i].getElementsByTagName("EventDescription");
                  if((eventDescriptionElements.length 0) && (eventDescriptionElements[0].firstChild != null))
                  {
                         eventDescription = eventDescriptionElements[0].firstChild.xml;
                  }
                  else
                  {
                      eventDescription = dataNotFoundWarningLabelNodeText;
                  }
                  var eventXmlElements = eventRecordArray[i].getElementsByTagName("EventXml");
                  if((eventXmlElements.length 0) && (eventXmlElements[0].firstChild != null))
                  {
                      eventXml = eventXmlElements[0].firstChild.xml;
                  }
                  else
                  {
                      eventXml = dataNotFoundWarningLabelNodeText;
                  }
                  var eventLevelElements = eventRecordArray[i].getElementsByTagName("EventLevel");
                  if((eventLevelElements.length 0) && (eventLevelElements[0].firstChild != null))
                  {
                      eventType = eventLevelElements[0].firstChild.xml;
                  }
                  else
                  {
                      eventType = 5;
                  }
                  
                  if((bVerbose == true)&&(eventType == 5))
                  {
                      displayEvent = true;
                  }
                  else if((bInformational == true)&&(eventType == 4))
                  {
                      displayEvent = true;
                  }
                  else if((bWarning == true)&&(eventType == 3))
                  {
                      displayEvent = true;
                  }
                  else if((bError == true)&&((eventType == 1)||(eventType == 2)))
                  {
                      displayEvent = true;
                  }
                  
                  if (displayEvent == true)
                  {
                      eventXmlId = "EventXml" + (i+"");
                      htmlText = htmlText + "<tr>";
                      htmlText = htmlText + "<td class=\"centerTxt\" style=\"background:" + displayBgColor +"\">" + eventId + "</td>";
                      htmlText = htmlText + "<td class=\"centerTxt\" style=\"background:" + displayBgColor +"\">" + eventTime + "</td>";
                      htmlText = htmlText + "<td class=\"txtFormat1\" style=\"background:" + displayBgColor +"\">" + eventDescription + "</td>";
                      htmlText = htmlText + "<td style=\"background:" + displayBgColor +"\"><span style=\"color:blue; cursor:hand\" onclick=\"toggle(" + eventXmlId +");\" onKeyPress=\"toggle(" + eventXmlId + ");\" tabIndex=1";
                      htmlText = htmlText + eventXmlLabelNodeText + "</span><br/>";
                      htmlText = htmlText + "<span style=\"display:none\" id=" + eventXmlId +">";
                      htmlText = htmlText + eventXml + "</span>";
                      htmlText = htmlText + "</td>";
                      htmlText = htmlText + "</tr>";
                  }
              }
          }
          htmlText = htmlText + "</table></body></html>";
  
          if(windowsArray[strWindowId])
          {
              delete windowsArray[strWindowId];
          }
          
          // IE specific method for showing the popup.
          if(navigator.userAgent.indexOf("MSIE") 0 && window.location.toString().indexOf("file:") == -1)
          {
              var strDiagArgs = "dialogHeight=360px;dialogWidth=630px;status=no;scroll=yes;resizable=yes;minimize=yes;maximize=yes;";
  
              var vModeless = window.showModelessDialog("about:blank", window, strDiagArgs);
              vModeless.document.write(htmlText);
              vModeless.document.close();
              vModeless.location.reload(false);
  	    windowsArray[strWindowId] = vModeless;            
          }
          else
          {
              var strDiagArgs = "height=360px, width=630px, status=no, toolbar=no, scrollbars=yes, resizable=yes";
          
              windowsArray[strWindowId] = window.open("", "", strDiagArgs);
              windowsArray[strWindowId].document.write(htmlText);
              windowsArray[strWindowId].focus();
          } 
      }
  }
  
  function cleanUp()
  {
  	for(var currentWindow in this.windowsArray) 
  	{
  		windowsArray[currentWindow].close();
  	}
  }
  
  function showComponentProcessingDetails(srcElement)
  {
      var strWindowId = "ProcessingDetails_" + srcElement.getAttribute("eventLogActivityId");
      if((windowsArray[strWindowId]) &&(windowsArray[strWindowId].closed == false))
      {
          windowsArray[strWindowId].focus();
      }
      else
      {
          var xmlDocument = RsopDataIslands.XMLDocument;
  
          var extensionsProcessedLabelNode, slowLinkThresholdLabelNode, linkSpeedLabelNode, extensionsProcessedTimeTakenNode;
          var domainControllerIPLabelNode, domainControllerNameLabelNode, processingTypeLabelNode, loopbackModeLabelNode;
          var processingTriggerLabelNode, extensionNameLabelNode, timeTakenLabelNode;
          var dataNotFoundWarningLabelNode;
          var singlePassEventsDetailsNode, totalProcessingTimeLabelNode, refreshMessageLabelNode;
          var processingDetailsUserTitleNode, processingDetailsComputerTitleNode;
          var policySectionNode;
          var policyEventsDetailsNode, detailsLabelNode;
  
          var extensionsProcessedLabelNodeText ,slowLinkThresholdLabelNodeText,linkSpeedLabelNodeText,extensionsProcessedTimeTakenNodeText;
          var domainControllerIPLabelNodeText, domainControllerNameLabelNodeText, processingTypeLabelNodeText,loopbackModeLabelNodeText;
          var processingTriggerLabelNodeText, extensionNameLabelNodeText, timeTakenLabelNodeText;
          var dataNotFoundWarningLabelNodeText, totalProcessingTimeLabelNodeText, refreshMessageLabelNodeText;
          var processingDetailsUserTitleNodeText, processingDetailsComputerTitleNodeText;
  	var detailsLabelNodeText;
  
          var slowLinkThresholdValue, linkSpeedValue, domainControllerIPValue, domainControllerNameValue;
          var processingTypeValue, loopbackModeValue, processingTriggerValue, totalPolicyProcessingTime, extensionProcessingTimeArray;
          var cseNameArray = new Array();
          var cseElapsedTimeArray = new Array();
          var policyApplicationFinishedTime;
  
          var isComputerProcessing;
  
          if(xmlDocument != null)
          {
              extensionsProcessedLabelNode = xmlDocument.selectSingleNode("MainSection/Label[@Name='ComponentStatus_ExtensionsProcessed']");
              slowLinkThresholdLabelNode = xmlDocument.selectSingleNode("MainSection/Label[@Name='ComponentStatus_SlowLinkThreshold']");
              linkSpeedLabelNode = xmlDocument.selectSingleNode("MainSection/Label[@Name='ComponentStatus_LinkSpeed']");
              extensionsProcessedTimeTakenNode = xmlDocument.selectSingleNode("MainSection/Label[@Name='ComponentStatus_TimeTaken']");
              domainControllerIPLabelNode = xmlDocument.selectSingleNode("MainSection/Label[@Name='ComponentStatus_DomainControllerIP']");
              domainControllerNameLabelNode = xmlDocument.selectSingleNode("MainSection/Label[@Name='ComponentStatus_DomainControllerName']");
              processingTypeLabelNode = xmlDocument.selectSingleNode("MainSection/Label[@Name='ComponentStatus_ProcessingType']");
              loopbackModeLabelNode = xmlDocument.selectSingleNode("MainSection/Label[@Name='ComponentStatus_LoopbackMode']");
              processingTriggerLabelNode = xmlDocument.selectSingleNode("MainSection/Label[@Name='ComponentStatus_ProcessingTrigger']");
              extensionNameLabelNode = xmlDocument.selectSingleNode("MainSection/Label[@Name='ComponentStatus_ExtensionName']");
              timeTakenLabelNode = xmlDocument.selectSingleNode("MainSection/Label[@Name='ComponentStatus_TimeTaken']");
              dataNotFoundWarningLabelNode = xmlDocument.selectSingleNode("MainSection/Label[@Name='Warning_DataNotFound']");
              totalProcessingTimeLabelNode = xmlDocument.selectSingleNode("MainSection/Label[@Name='ComponentStatus_TotalProcessingTime']");
              refreshMessageLabelNode = xmlDocument.selectSingleNode("MainSection/Label[@Name='ComponentStatus_RefreshMessage']");
              singlePassEventsDetailsNode = xmlDocument.selectSingleNode("//SinglePassEventsDetails[@ActivityId='" + srcElement.getAttribute("eventLogActivityId") + "']");            
      	    processingDetailsUserTitleNode = xmlDocument.selectSingleNode("MainSection/Label[@Name='ComponentStatus_UserProcessingDetails']");
      	    processingDetailsComputerTitleNode = xmlDocument.selectSingleNode("MainSection/Label[@Name='ComponentStatus_ComputerProcessingDetails']");
  	    detailsLabelNode = xmlDocument.selectSingleNode("MainSection/Label[@Name='ComponentStatus_Details']");
  
              if(singlePassEventsDetailsNode)
              {
                  policyEventsDetailsNode = singlePassEventsDetailsNode.parentNode;
                  if(policyEventsDetailsNode)
                  {
                      policySectionNode = policyEventsDetailsNode.parentNode;
                      if(policySectionNode)
                      {
                          if(policySectionNode.nodeName == 'UserPolicySection')
                          {
                              isComputerProcessing = false;
                          }                    
                          if(policySectionNode.nodeName == 'ComputerPolicySection')
                          {
                              isComputerProcessing = true;
                          }
                      }               
                  }
              }            
          }
  
  	extensionsProcessedLabelNodeText = null;
          if(extensionsProcessedLabelNode  != null)
          {
              if((extensionsProcessedLabelNode.firstChild != null) && (extensionsProcessedLabelNode.firstChild.childNodes.length 0))
              {
                  extensionsProcessedLabelNodeText = extensionsProcessedLabelNode.firstChild.childNodes[0].nodeValue;
              }
          }
  
          slowLinkThresholdLabelNodeText = null;
          if(slowLinkThresholdLabelNode  != null)
          {
              if((slowLinkThresholdLabelNode.firstChild != null) && (slowLinkThresholdLabelNode.firstChild.childNodes.length 0))
              {
                  slowLinkThresholdLabelNodeText = slowLinkThresholdLabelNode.firstChild.childNodes[0].nodeValue;
              }
          }
              
          linkSpeedLabelNodeText = null;
          if(linkSpeedLabelNode  != null)
          {
              if((linkSpeedLabelNode.firstChild != null) && (linkSpeedLabelNode.firstChild.childNodes.length 0))
              {
                  linkSpeedLabelNodeText = linkSpeedLabelNode.firstChild.childNodes[0].nodeValue;
              }
          }
          
          domainControllerIPLabelNodeText = null;
          if(domainControllerIPLabelNode != null)
          {
              if((domainControllerIPLabelNode.firstChild != null) && (domainControllerIPLabelNode.firstChild.childNodes.length 0))
              {
                  domainControllerIPLabelNodeText = domainControllerIPLabelNode.firstChild.childNodes[0].nodeValue;
              }
          }
          
          domainControllerNameLabelNodeText = null;
          if(domainControllerNameLabelNode != null)
          {
              if((domainControllerNameLabelNode.firstChild != null) && (domainControllerNameLabelNode.firstChild.childNodes.length 0))
              {
                  domainControllerNameLabelNodeText = domainControllerNameLabelNode.firstChild.childNodes[0].nodeValue;
              }
          }
          
          processingTypeLabelNodeText = null;
          if(processingTypeLabelNode != null)
          {
              if((processingTypeLabelNode.firstChild != null) && (processingTypeLabelNode.firstChild.childNodes.length 0))
              {
                  processingTypeLabelNodeText = processingTypeLabelNode.firstChild.childNodes[0].nodeValue;
              }
          }
  
  
          
          loopbackModeLabelNodeText = null;
          if(loopbackModeLabelNode != null)
          {
              if((loopbackModeLabelNode.firstChild != null) && (loopbackModeLabelNode.firstChild.childNodes.length 0))
              {
                  loopbackModeLabelNodeText = loopbackModeLabelNode.firstChild.childNodes[0].nodeValue;
              }
          }
          
          processingTriggerLabelNodeText = null;
          if(processingTriggerLabelNode != null)
          {
              if((processingTriggerLabelNode.firstChild != null) && (processingTriggerLabelNode.firstChild.childNodes.length 0))
              {
                  processingTriggerLabelNodeText = processingTriggerLabelNode.firstChild.childNodes[0].nodeValue;
              }
          }
             
  	extensionNameLabelNodeText = null;
          if(extensionNameLabelNode  != null)
          {
              if((extensionNameLabelNode.firstChild != null) && (extensionNameLabelNode.firstChild.childNodes.length 0))
              {
                  extensionNameLabelNodeText = extensionNameLabelNode.firstChild.childNodes[0].nodeValue;
              }
          }
  
          timeTakenLabelNodeText = null;
          if(timeTakenLabelNode != null)
          {
              if((timeTakenLabelNode.firstChild != null) && (timeTakenLabelNode.firstChild.childNodes.length 0))
              {
                  timeTakenLabelNodeText = timeTakenLabelNode.firstChild.childNodes[0].nodeValue;
              }
          }
  
          processingDetailsUserTitleNodeText = null;
          if(processingDetailsUserTitleNode  != null)
          {
  	        if((processingDetailsUserTitleNode.firstChild != null) && (processingDetailsUserTitleNode.firstChild.childNodes.length 0))
  	        {
  		        processingDetailsUserTitleNodeText = processingDetailsUserTitleNode.firstChild.childNodes[0].nodeValue;
  	        }
          }
                  
          processingDetailsComputerTitleNodeText = null;
          if(processingDetailsComputerTitleNode  != null)
          {
  	        if((processingDetailsComputerTitleNode.firstChild != null) && (processingDetailsComputerTitleNode.firstChild.childNodes.length 0))
  	        {
  		        processingDetailsComputerTitleNodeText = processingDetailsComputerTitleNode.firstChild.childNodes[0].nodeValue;
  	        }
          }           
          
          dataNotFoundWarningLabelNodeText = null;
          if(dataNotFoundWarningLabelNode  != null)
          {
              if((dataNotFoundWarningLabelNode.firstChild != null) && (dataNotFoundWarningLabelNode.firstChild.childNodes.length 0))
              {
                  dataNotFoundWarningLabelNodeText = dataNotFoundWarningLabelNode.firstChild.childNodes[0].nodeValue;
              }
          }
          
          totalProcessingTimeLabelNodeText = null;
          if(totalProcessingTimeLabelNode  != null)
          {
              if((totalProcessingTimeLabelNode.firstChild != null) && (totalProcessingTimeLabelNode.firstChild.childNodes.length 0))
              {
                  totalProcessingTimeLabelNodeText = totalProcessingTimeLabelNode.firstChild.childNodes[0].nodeValue;
              }
          }
          
          refreshMessageLabelNodeText = null;
          if(refreshMessageLabelNode  != null)
          {
              if((refreshMessageLabelNode.firstChild != null) && (refreshMessageLabelNode.firstChild.childNodes.length 0))
              {
                  refreshMessageLabelNodeText = refreshMessageLabelNode.firstChild.childNodes[0].nodeValue;
              }
          }
          
  	if(detailsLabelNode  != null)
          {
              if((detailsLabelNode.firstChild != null) && (detailsLabelNode.firstChild.childNodes.length 0))
              {
                  detailsLabelNodeText = detailsLabelNode.firstChild.childNodes[0].nodeValue;
              }
          }
  
  	slowLinkThresholdValue = null;
          linkSpeedValue = null;
          domainControllerIPValue = null;
          domainControllerNameValue = null;
          processingTypeValue = null;
          loopbackModeValue = null;
          processingTriggerValue = null;
  
          if(singlePassEventsDetailsNode  != null)
          {
              slowLinkThresholdValue = singlePassEventsDetailsNode.getAttribute("SlowLinkThresholdInKbps");
              linkSpeedValue = singlePassEventsDetailsNode.getAttribute("LinkSpeedInKbps");
              domainControllerIPValue = singlePassEventsDetailsNode.getAttribute("DomainControllerIPAddress");
              domainControllerNameValue = singlePassEventsDetailsNode.getAttribute("DomainControllerName");
              processingTypeValue = singlePassEventsDetailsNode.getAttribute("ProcessingAppMode");
              loopbackModeValue = singlePassEventsDetailsNode.getAttribute("PolicyProcessingMode");
              processingTriggerValue = singlePassEventsDetailsNode.getAttribute("ProcessingTrigger");
              totalPolicyProcessingTime = singlePassEventsDetailsNode.getAttribute("PolicyElapsedTime");
              extensionProcessingTimeArray = singlePassEventsDetailsNode.getElementsByTagName("ExtensionProcessingTime");
          }
          if(slowLinkThresholdValue == null)
          {
              slowLinkThresholdValue  = dataNotFoundWarningLabelNodeText;    
          }
          if(linkSpeedValue == null)
          {
              linkSpeedValue = dataNotFoundWarningLabelNodeText;    
          }   
          if(domainControllerIPValue == null)
          {
              domainControllerIPValue = dataNotFoundWarningLabelNodeText;    
          }
          else
          {
              domainControllerIPValue  = domainControllerIPValue.replace(/^\\\\/,"");
          }
          if(domainControllerNameValue == null)
          {
              domainControllerNameValue= dataNotFoundWarningLabelNodeText;    
          }
          else
          {
              domainControllerNameValue= domainControllerNameValue.replace(/^\\\\/,"");
          }
          if(processingTypeValue == null)
          {
              processingTypeValue = dataNotFoundWarningLabelNodeText;    
          }
          if(loopbackModeValue == null)
          {
              loopbackModeValue = dataNotFoundWarningLabelNodeText;    
          }
          if(processingTriggerValue == null)
          {
              processingTriggerValue = dataNotFoundWarningLabelNodeText;    
          }
  
  	if (extensionProcessingTimeArray.length 0)
          {
              var cseName;
              var cseElapsedTime;
              var cseProcessedTime;
              var cseId;
              var i;
              var index = 0;
              for (i = 0; i < extensionProcessingTimeArray.length; i++) 
              {
                  var cseNameElements = extensionProcessingTimeArray[i].getElementsByTagName("ExtensionName");
                  var cseElapsedTimeElements = extensionProcessingTimeArray[i].getElementsByTagName("ElapsedTime");
                  var cseProcessedTimeElements = extensionProcessingTimeArray[i].getElementsByTagName("ProcessedTime");
                  var cseIdElements = extensionProcessingTimeArray[i].getElementsByTagName("ExtensionGuid");
                  if((cseNameElements.length 0) && (cseElapsedTimeElements.length 0) && (cseProcessedTimeElements.length 0) && (cseIdElements.length 0))
                  {
                      if((cseNameElements[0].firstChild != null) && (cseElapsedTimeElements[0].firstChild != null) && (cseProcessedTimeElements[0].firstChild != null) && (cseIdElements[0].firstChild != null))
                      {
                          cseName = cseNameElements[0].firstChild.nodeValue;
                          cseElapsedTime = cseElapsedTimeElements[0].firstChild.nodeValue;
                          cseProcessedTime = cseProcessedTimeElements[0].firstChild.nodeValue;
                          cseId = cseIdElements[0].firstChild.nodeValue;
                          if((cseName != null)&&(cseElapsedTime != null)&&(cseProcessedTime != null)&&(cseId != null))
                          {
                              cseNameArray[index]= cseName;
                              cseElapsedTimeArray[index]= cseElapsedTime;
                              index = index+1;
                              if(cseId == '{00000000-0000-0000-0000-000000000000}')
                              {
                                  policyApplicationFinishedTime = cseProcessedTime;
                              }
                          }
                      }
                  }
              }
          }
            
          var htmlText = "<html dir=" + document.dir +  ">";
          htmlText = htmlText + "<head>";
  	htmlText = htmlText + "<meta http-equiv=\"X-UA-Compatible\" content=\"IE=EmulateIE9\" />";
  	htmlText = htmlText + "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-16\" />";
          if(isComputerProcessing != null)
          {
              if(isComputerProcessing == true)
              {
                  htmlText = htmlText + "<title>" + processingDetailsComputerTitleNodeText + "</title>";
              }
              else
              {
                  htmlText = htmlText + "<title>" + processingDetailsUserTitleNodeText + "</title>";
              }
          }
  
  	htmlText = htmlText + "</head><style type=\"text/css\">";
          htmlText = htmlText + "body    { background-color:#FFFFFF; color:#000000; font-size:68%; font-family:MS Shell Dlg; margin:0,0,10px,0; word-break:normal; word-wrap:break-word; }";
          htmlText = htmlText + "table   { font-size:100%; table-layout:fixed; width:100%; }";
          htmlText = htmlText + "td,th   { overflow:visible; text-align:left; vertical-align:top; white-space:normal; }";
          htmlText = htmlText + ".he0    { background-color:#FEF7D6; border:1px solid #BBBBBB; display:block; font-family:MS Shell Dlg; font-size:100%; font-weight:bold; height:2.25em; margin-bottom:-1px; margin-left:0px; margin-right:0px; padding-left:8px; padding-right:5em; padding-top:4px; position:relative; width:100%; }";
          htmlText = htmlText + ".he1    { color:#000000; display:block; font-family:MS Shell Dlg; font-size:100%; font-weight:bold; height:2em;margin-left: 5 px; margin-top: 5 px; position:relative; width:100%; }";
          htmlText = htmlText + ".tblspecialfmt { border:1px solid black;border-collapse:collapse; }";
          htmlText = htmlText + ".tblfirstcolfmt { border-left-width: 1px;border-top-width: 1px;border-bottom-width: 1px;border-right-width: 0px;border-style: solid; border-color: black; }";
          htmlText = htmlText + ".tblsecondcolfmt { border-left-width: 0px;border-top-width: 1px;border-bottom-width: 1px;border-right-width: 1px;border-style: solid; border-color: black; }";
          htmlText = htmlText + "</style>";
          htmlText = htmlText + "<body>";
          htmlText = htmlText + "<span class=\"he1\">" + refreshMessageLabelNodeText + " " + policyApplicationFinishedTime + "</span>" ;
          htmlText = htmlText + "<div class=\"he0\">" + detailsLabelNodeText + "</div>"
          htmltext = htmlText + "<table><tr>";
  
          htmlText = htmlText + "<td>";
          htmlText = htmlText + "<table>";
          htmlText = htmlText + "<tr><td colspan=\"2\">&nbsp;</td></tr>";
  
  
          htmlText = htmlText + "<tr><td style=\"width: 50%\"><strong>" + processingTypeLabelNodeText + "</strong></td>";
          htmlText = htmlText + "<td>" + processingTypeValue + "</td></tr>";
  
          htmlText = htmlText + "<tr><td style=\"width: 50%\"><strong>" + loopbackModeLabelNodeText + "</strong></td>";
          htmlText = htmlText + "<td>" + loopbackModeValue + "</td></tr>";
  
          htmlText = htmlText + "<tr><td style=\"width: 50%\"><strong>" + linkSpeedLabelNodeText + "</strong></td>";
          htmlText = htmlText + "<td>" + linkSpeedValue + "</td></tr>";
  
          htmlText = htmlText + "<tr><td style=\"width: 50%\"><strong>" + slowLinkThresholdLabelNodeText + "</strong></td>";
          htmlText = htmlText + "<td>" + slowLinkThresholdValue + "</td></tr>";
  
          htmlText = htmlText + "<tr><td style=\"width: 50%\"><strong>" + domainControllerNameLabelNodeText + "</strong></td>";
          htmlText = htmlText + "<td>" + domainControllerNameValue +"</td></tr>";
  
          htmlText = htmlText + "<tr><td style=\"width: 50%\"><strong>" + domainControllerIPLabelNodeText + "</strong></td>";
          htmlText = htmlText + "<td>" + domainControllerIPValue +"</td></tr>";
  
          htmlText = htmlText + "<tr><td style=\"width: 50%\"><strong>" + processingTriggerLabelNodeText + "</strong></td>";
          htmlText = htmlText + "<td>" + processingTriggerValue + "</td></tr>";
  
          htmlText = htmlText + "</table></td></tr>";
          htmlText = htmlText + "<tr<td<table>";
  
  
          htmlText = htmlText + "<tr><td><span class=\"he1\"" + extensionsProcessedLabelNodeText +"</span></td></tr>";
          htmlText = htmlText + "<tr><td><table class=\"tblspecialfmt\"";
          htmlText = htmlText + "<tr><td class=\"tblfirstcolfmt\" style=\"width: 50%;background-color:#FEF7D6;\"><strong>" + extensionNameLabelNodeText + "</strong></td>";
          htmlText = htmlText + "<td class=\"tblsecondcolfmt\" style=\"background-color:#FEF7D6;\"<strong>" + timeTakenLabelNodeText + "</strong></td></tr>";
  
          for (var idx in cseNameArray)
          {
              htmlText = htmlText + "<tr><td style=\"width: 50%\">" + cseNameArray[idx] + "</td>";                   
              htmlText = htmlText + "<td>" + cseElapsedTimeArray[idx] + "</td></tr>";
          }
  
          if (totalPolicyProcessingTime != null)
          {
              htmlText = htmlText + "<tr><td class=\"tblfirstcolfmt\" style=\"width: 50%\"" + totalProcessingTimeLabelNodeText +":</td>";
              htmlText = htmlText + "<td class=\"tblsecondcolfmt\">" + totalPolicyProcessingTime + "</td></tr>";
          }
          htmlText = htmlText + "</table></td></tr></table></td></tr></table></body></html>";
  
          if(windowsArray[strWindowId])
          {
             delete windowsArray[strWindowId];
          }
           
          // IE specific method for showing the popup.
          if(navigator.userAgent.indexOf("MSIE") 0 && window.location.toString().indexOf("file:") == -1)
          {
              var strDiagArgs = "dialogHeight=360px;dialogWidth=630px;status=no;scroll=yes;resizable=yes;minimize=yes;maximize=yes;";
  
              var vModeless = window.showModelessDialog("about:blank", window, strDiagArgs);
              vModeless.document.write(htmlText);
              vModeless.document.close();
              vModeless.location.reload(false);
              windowsArray[strWindowId] = vModeless;                      
          }
          else
          {
              var strDiagArgs = "height=360px, width=630px, status=no, toolbar=no, scrollbars=yes, resizable=yes";
          
              windowsArray[strWindowId] = window.open("", "" , strDiagArgs);
              windowsArray[strWindowId].document.write(htmlText);
              windowsArray[strWindowId].focus();
          }
      }
  }
  -->
  </script>
  </head>
  
  <body onunload="javascript:cleanUp();return false;">
  
  <!-- HTML resources -->
  <div style="display:none;">
          <div id="explainText_windowTitle">Group Policy Management</div>
          <div id="explainText_windowStyles">
          
                              body  { font-size:68%;font-family:MS Shell Dlg; margin:0px,0px,0px,0px; border: 1px solid #666666; background:#F6F6F6; width:100%; word-break:normal; word-wrap:break-word; }
  
                              .head { font-weight:bold; font-size:160%; font-family:MS Shell Dlg; width:100%; color:#6587DC; background:#E3EAF9; border:1px solid #5582D2; padding-left:8px; height:24px; }
  
                              .path { margin-left: 10px; margin-top: 10px; margin-bottom:5px;width:100%; }
  
                              .info { padding-left:10px;width:100%; }
  
                              table { font-size:100%; width:100%; border:1px solid #999999; }
  
                              th    { border-bottom:1px solid #999999; text-align:left; padding-left:10px; height:24px; }
  
                              td    { background:#FFFFFF; padding-left:10px; padding-bottom:10px; padding-top:10px; }
  
                              .btn  { width:100%; text-align:right; margin-top:16px; }
  
                              .hdr  { font-weight:bold; border:1px solid #999999; text-align:left; padding-top: 4px; padding-left:10px; height:24px; margin-bottom:-1px; width:100%; }
  
                              .bdy  { width:100%; height:182px; display:block; overflow:scroll; z-index:2; background:#FFFFFF; padding-left:10px; padding-bottom:10px; padding-top:10px; border:1px solid #999999; }
  
                              button { width:6.9em; height:2.1em; font-size:100%; font-family:MS Shell Dlg; margin-right:15px; }
  
                              @media print {
  
                                  .bdy { display:block; overflow:visible; }
  
                                  button { display:none; }
  
                                  .head { color:#000000; background:#FFFFFF; border:1px solid #000000; }
  
                              }
  
                  
          </div>
          <div id="explainText_settingPathLabel">Setting Path:</div>
          <div id="explainText_explainTextLabel">Explanation</div>
          <div id="explainText_printButton">
          <button name="Print" onClick="window.print()" accesskey="P"><u>P</u>rint</button>
  
                  </div>
          <div id="explainText_closeButton">
          <button name="Close" onClick="window.close()" accesskey="C"><u>C</u>lose</button>
                  
          </div>
          <div id="explainText_noExplainTextAvailable">No explanation is available for this setting.</div>
          <div id="explainText_supportedLabel">Supported On:</div>
          <div id="explainText_noSupportedTextAvailable">Not available</div>
  </div><table class="title" cellpadding="0" cellspacing="0">
  <tr><td colspan="2" class="gponame">Default Domain Policy</td></tr>
  <tr>
      <td id="dtstamp">Data collected on: 12/8/2015 4:52:38 PM</td>
      <td><div id="objshowhide" tabindex="0"></div></td>
  </tr>
  </table>
  
  <div class="gposummary">
  <div class="he0_expanded"><span class="sectionTitle" tabindex="0">General</span><a class="expando" href="#"></a></div>
  <div class="container"><div class="he1"><span class="sectionTitle" tabindex="0">Details</span><a class="expando" href="#"></a></div>
  <div class="container"><div class="he4i"><table class="info" cellpadding="0" cellspacing="0">
  <tr><td scope="row">Domain</td><td>atl.careerbuilder.com</td></tr>
  <tr><td scope="row">Owner</td><td>CBATL\Domain Admins</td></tr>
  <tr><td scope="row">Created</td><td>4/30/2002 5:10:54 PM</td></tr>
  <tr><td scope="row">Modified</td><td>11/19/2015 2:06:08 PM</td></tr>
  <tr><td scope="row">User Revisions</td><td>50 (AD), 50 (SYSVOL)</td></tr>
  <tr><td scope="row">Computer Revisions</td><td>1303 (AD), 1303 (SYSVOL)</td></tr>
  <tr><td scope="row">Unique ID</td><td>{31B2F340-016D-11D2-945F-00C04FB984F9}</td></tr>
  <tr><td scope="row">GPO Status</td><td>Enabled</td></tr>
  </table></div></div>
  <div class="filler"></div>
  <div class="he1"><span class="sectionTitle" tabindex="0">Links</span><a class="expando" href="#"></a></div>
  <div class="container"><div class="he4i"><table class="info3" cellpadding="0" cellspacing="0"><tr><th scope="col">Location</th><th scope="col">Enforced</th><th scope="col">Link Status</th><th scope="col">Path</th></tr>
      <tr><td>atl</td><td>Yes</td><td>Enabled</td><td>atl.careerbuilder.com</td></tr>
      </table>
      <br/>This list only includes links in the domain of the GPO.</div></div>
  <div class="filler"></div>
  <div class="he1"><span class="sectionTitle" tabindex="0">Security Filtering</span><a class="expando" href="#"></a></div>
  <div class="container"><div class="he4i"><b>The settings in this GPO can only apply to the following groups, users, and computers:</b></div>
  <div class="he4i">
  <table class="info" cellpadding="0" cellspacing="0"><tr><th scope="col">Name</th></tr><tr><td>NT AUTHORITY\Authenticated Users</td></tr></table>
  </div>
  </div>
  <div class="filler"></div>
  
  <div class="filler"></div>
  <div class="he1"><span class="sectionTitle" tabindex="0">Delegation</span><a class="expando" href="#"></a></div>
  <div class="container"><div class="he4i"><b>These groups and users have the specified permission for this GPO</b></div>
  <div class="he4i">
  <table class="info3" cellpadding="0" cellspacing="0">
  <tr><th scope="col">Name</th><th scope="col">Allowed Permissions</th><th scope="col">Inherited</th></tr>
  <tr><td>CBATL\Domain Admins</td><td>Edit settings, delete, modify security</td><td>No</td></tr>
  <tr><td>CBATL\Enterprise Admins</td><td>Edit settings, delete, modify security</td><td>No</td></tr>
  <tr><td>NT AUTHORITY\Authenticated Users</td><td>Read (from Security Filtering)</td><td>No</td></tr>
  <tr><td>NT AUTHORITY\ENTERPRISE DOMAIN CONTROLLERS</td><td>Read</td><td>No</td></tr>
  <tr><td>NT AUTHORITY\SYSTEM</td><td>Edit settings, delete, modify security</td><td>No</td></tr>
  </table>
  
  </div></div></div>
  <div class="filler"></div>
  </div>

</div></div><div class="he3"><span class="sectionTitle" tabindex="0">Local Policies/User Rights Assignment</span><a class="expando" href="#"></a></div>
  <div class="container"><div class="he4i"><table class="info" cellpadding="0" cellspacing="0">
  <tr><th scope="col">Policy</th><th scope="col">Setting</th></tr>
  <tr><td>Deny log on through Terminal Services</td><td>denylogin</td></tr>
  <tr><td>Force shutdown from a remote system</td><td>CBATL\Web Admins, CBATL\SQLAdmin, CBATL\MT Admins, CBATL\Domain Admins, CBATL\CB CorpApplications Deploy, CBATL\Account Operations Group</td></tr>
  <tr><td>Shut down the system</td><td>CBATL\Web Admins, CBATL\SQLAdmin, CBATL\MT Admins, CBATL\Domain Admins, CBATL\CB CorpApplications Deploy, CBATL\Account Operations Group</td></tr>
  </table>

